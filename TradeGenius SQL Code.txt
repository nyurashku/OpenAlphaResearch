-- (I) DOWN Script

-- Removing FK constraints first to avoid the dependency issues
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_name = 'fk_tickers_company')
    ALTER TABLE tickers DROP CONSTRAINT fk_tickers_company;

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE constraint_name = 'fk_tickers_financials')
    ALTER TABLE tickers DROP CONSTRAINT fk_tickers_financials;

-- Drop all tables
DROP TABLE IF EXISTS exchange_ticker;
DROP TABLE IF EXISTS exchange;
DROP TABLE IF EXISTS tickers;
DROP TABLE IF EXISTS financials;
DROP TABLE IF EXISTS companies;
DROP TABLE IF EXISTS watchlist_company;
DROP TABLE IF EXISTS watchlists;
DROP TABLE IF EXISTS accounts;
DROP TABLE IF EXISTS user_company;
DROP TABLE IF EXISTS users;
GO

-- (II) META DATA Up Script

-- Users Table
CREATE TABLE users (
    user_id INT IDENTITY NOT NULL,
    user_email VARCHAR(255) NOT NULL UNIQUE,
    user_firstname VARCHAR(255),
    user_lastname VARCHAR(255),
    user_city VARCHAR(255),
    user_state VARCHAR(50),
    user_zipcode VARCHAR(20),
    user_date_of_birth DATE,
    CONSTRAINT pk_users_user_id PRIMARY KEY (user_id)
);

-- Accounts Table
CREATE TABLE accounts (
    account_id INT IDENTITY NOT NULL,
    account_type VARCHAR(50),
    account_open_date DATE,
    account_user_id INT,
    CONSTRAINT pk_accounts_account_id PRIMARY KEY (account_id)
);

ALTER TABLE accounts 
    ADD CONSTRAINT fk_accounts_user FOREIGN KEY (account_user_id)
    REFERENCES users(user_id);

-- Watchlists Table
CREATE TABLE watchlists (
    watchlist_id INT IDENTITY NOT NULL,
    creation_date DATE,
    CONSTRAINT pk_watchlists_watchlist_id PRIMARY KEY (watchlist_id)
);

-- Companies Table
CREATE TABLE companies (
    company_id INT IDENTITY NOT NULL,
    company_ticker VARCHAR(20),
    company_name VARCHAR(255) NOT NULL,
    company_industry VARCHAR(255),
    company_founded_date DATE,
    company_inc_state VARCHAR(50),
    company_emp_count INT,
    company_description TEXT,
    CONSTRAINT pk_companies_company_id PRIMARY KEY (company_id)
);

-- Financials Table
CREATE TABLE financials (
    financial_id INT IDENTITY NOT NULL,
    financial_revenue DECIMAL(19, 4),
    financial_expense DECIMAL(19, 4),
    financial_netincome DECIMAL(19, 4),
    financial_assets DECIMAL(19, 4),
    financial_liabilities DECIMAL(19, 4),
    financial_ebitda DECIMAL(19, 4),
    financial_ebit DECIMAL(19, 4),
    CONSTRAINT pk_financials_financial_id PRIMARY KEY (financial_id)
);

-- Tickers Table
CREATE TABLE tickers (
    ticker_id INT IDENTITY NOT NULL,
    ticker_name VARCHAR(20) NOT NULL,
    ticker_ipo_date DATE,
    ticker_ipo_price DECIMAL(19, 4),
    ticker_daily_open DECIMAL(19, 4),
    ticker_daily_close DECIMAL(19, 4),
    ticker_daily_high DECIMAL(19, 4),
    ticker_daily_low DECIMAL(19, 4),
    ticker_daily_volume BIGINT,
    ticker_market_cap DECIMAL(19, 4),
    ticker_pe_ratio DECIMAL(19, 4),
    company_id INT,
    financial_id INT,
    CONSTRAINT pk_tickers_ticker_id PRIMARY KEY (ticker_id)
);

ALTER TABLE tickers 
    ADD CONSTRAINT fk_tickers_company FOREIGN KEY (company_id)
    REFERENCES companies(company_id);

ALTER TABLE tickers 
    ADD CONSTRAINT fk_tickers_financials FOREIGN KEY (financial_id)
    REFERENCES financials(financial_id);

-- Exchange Table
CREATE TABLE exchange (
    exchange_id INT IDENTITY NOT NULL,
    exchange_name VARCHAR(255) NOT NULL,
    CONSTRAINT pk_exchange_exchange_id PRIMARY KEY (exchange_id)
);

-- Exchange_Ticker Table
CREATE TABLE exchange_ticker (
    ticker_id INT,
    exchange_id INT,
    CONSTRAINT pk_exchange_ticker PRIMARY KEY (ticker_id, exchange_id)
);

ALTER TABLE exchange_ticker
    ADD CONSTRAINT fk_exchange_ticker_ticker FOREIGN KEY (ticker_id)
    REFERENCES tickers(ticker_id);

ALTER TABLE exchange_ticker
    ADD CONSTRAINT fk_exchange_ticker_exchange FOREIGN KEY (exchange_id)
    REFERENCES exchange(exchange_id);

-- Watchlist_Company Table
CREATE TABLE watchlist_company (
    watchlist_id INT,
    company_id INT,
    watchlist_company_added_date DATE,
    CONSTRAINT pk_watchlist_company PRIMARY KEY (watchlist_id, company_id)
);

ALTER TABLE watchlist_company
    ADD CONSTRAINT fk_watchlist_company_watchlist FOREIGN KEY (watchlist_id)
    REFERENCES watchlists(watchlist_id);

ALTER TABLE watchlist_company
    ADD CONSTRAINT fk_watchlist_company_company FOREIGN KEY (company_id)
    REFERENCES companies(company_id);

-- User_Company Table
CREATE TABLE user_company (
    user_id INT,
    company_id INT,
    CONSTRAINT pk_user_company PRIMARY KEY (user_id, company_id)
);

ALTER TABLE user_company
    ADD CONSTRAINT fk_user_company_user FOREIGN KEY (user_id)
    REFERENCES users(user_id);

ALTER TABLE user_company
    ADD CONSTRAINT fk_user_company_company FOREIGN KEY (company_id)
    REFERENCES companies(company_id);
GO



-- (III) DUMMY UP Data

INSERT INTO users (user_email, user_firstname, user_lastname, user_city, user_state, user_zipcode, user_date_of_birth)
VALUES 
  ('jdoe@example.com', 'John', 'Doe', 'New York', 'NY', '10001', '1985-01-01'),
  ('asmith@example.com', 'Anna', 'Smith', 'San Francisco', 'CA', '94016', '1990-05-15'),
  ('tjones@example.com', 'Tom', 'Jones', 'Chicago', 'IL', '60007', '1979-11-23');


INSERT INTO accounts (account_type, account_open_date, account_user_id)
VALUES 
  ('Retail', '2019-01-01', 1),
  ('CTA', '2020-06-15', 2),
  ('Journalism', '2021-03-22', 3);


INSERT INTO watchlists (creation_date)
VALUES 
  ('2022-01-10'),
  ('2022-05-20'),
  ('2022-07-15');


INSERT INTO companies (company_ticker, company_name, company_industry, company_founded_date, company_inc_state, company_emp_count, company_description)
VALUES 
  ('AAPL', 'Apple Inc.', 'Technology', '1976-04-01', 'CA', 147000, 'Technology company specialized in consumer electronics.'),
  ('MSFT', 'Microsoft Corporation', 'Technology', '1975-04-04', 'WA', 181000, 'Technology company known for its software products.'),
  ('TSLA', 'Tesla, Inc.', 'Automotive', '2003-07-01', 'CA', 70757, 'Automotive and clean energy company.');


INSERT INTO financials (financial_revenue, financial_expense, financial_netincome, financial_assets, financial_liabilities, financial_ebitda, financial_ebit)
VALUES 
  (365000000000.00, 150000000000.00, 94000000000.00, 500000000000.00, 250000000000.00, 110000000000.00, 108000000000.00),
  (168000000000.00, 70000000000.00, 61000000000.00, 301000000000.00, 183000000000.00, 73000000000.00, 71000000000.00),
  (31500000000.00, 12000000000.00, 6900000000.00, 55000000000.00, 29000000000.00, 14000000000.00, 13000000000.00);


INSERT INTO tickers (ticker_name, ticker_ipo_date, ticker_ipo_price, ticker_daily_open, ticker_daily_close, ticker_daily_high, ticker_daily_low, ticker_daily_volume, ticker_market_cap, ticker_pe_ratio, company_id, financial_id)
VALUES 
  ('AAPL', '1980-12-12', 22.00, 175.00, 180.00, 182.00, 174.00, 100000000, 2400000000000.00, 35.00, 1, 1),
  ('MSFT', '1986-03-13', 21.00, 300.00, 310.00, 315.00, 295.00, 35000000, 2300000000000.00, 30.00, 2, 2),
  ('TSLA', '2010-06-29', 17.00, 900.00, 1000.00, 1020.00, 880.00, 40000000, 1000000000000.00, 120.00, 3, 3);


INSERT INTO exchange (exchange_name)
VALUES 
  ('New York Stock Exchange'),
  ('NASDAQ'),
  ('Chicago Board Options Exchange');


INSERT INTO exchange_ticker (ticker_id, exchange_id)
VALUES 
  (1, 1),
  (2, 2),
  (3, 3);


INSERT INTO watchlist_company (watchlist_id, company_id, watchlist_company_added_date)
VALUES 
  (1, 1, '2022-01-12'),
  (2, 2, '2022-05-22'),
  (3, 3, '2022-07-17');

INSERT INTO user_company (user_id, company_id)
VALUES 
  (1, 1),
  (2, 2),
  (3, 3);

GO
-- (IV) TRIGGERS
--TRIGGERS
--TRIGGERS
--DOWN
DROP TRIGGER if exists ticker_daily_change
GO


--UP 
CREATE TRIGGER ticker_daily_change
ON tickers
INSTEAD OF INSERT, UPDATE, DELETE
AS
BEGIN
    IF EXISTS (SELECT 1 FROM inserted)
    BEGIN
        IF (
            SELECT MAX(ticker_daily_high) 
            FROM tickers 
            WHERE ticker_daily_high IN (SELECT ticker_daily_high FROM inserted)
        ) >= (
            SELECT MIN(ticker_daily_low) 
            FROM inserted
        ) OR (
            SELECT MIN(ticker_daily_low)
            FROM tickers 
            WHERE ticker_daily_low IN (SELECT ticker_daily_low FROM inserted)
        ) <= (
            SELECT MAX(ticker_daily_high)
            FROM inserted
        )
        BEGIN
            -- Update ticker_daily_low
            UPDATE t
            SET t.ticker_daily_low = i.ticker_daily_low
            FROM tickers t
            INNER JOIN inserted i ON t.ticker_id = i.ticker_id;
          
            -- Update ticker_daily_high
            UPDATE t
            SET t.ticker_daily_high = i.ticker_daily_high
            FROM tickers t
            INNER JOIN inserted i ON t.ticker_id = i.ticker_id;
        END
        ELSE
        BEGIN
            -- Database constraint error
            RAISERROR ('Constraint violation', 16, 1);
        END
    END
END;


-- (V) Verify Section
SELECT * FROM users;
SELECT * FROM accounts;
SELECT * FROM watchlists;
SELECT * FROM companies;
SELECT * FROM financials;
SELECT * FROM tickers;
SELECT * FROM exchange;
SELECT * FROM exchange_ticker;
SELECT * FROM watchlist_company;
SELECT * FROM user_company;
GO
